[{"C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\component\\Favorites.jsx":"1","C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\component\\Home.jsx":"2","C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\App.js":"3","C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\component\\Header.jsx":"4","C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\reportWebVitals.js":"5"},{"size":641,"mtime":1610619001820,"results":"6","hashOfConfig":"7"},{"size":4484,"mtime":1610621431314,"results":"8","hashOfConfig":"7"},{"size":2505,"mtime":1610621530256,"results":"9","hashOfConfig":"7"},{"size":488,"mtime":1610620866725,"results":"10","hashOfConfig":"7"},{"size":362,"mtime":1610218450802,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ccs5c6",{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\component\\Favorites.jsx",["24","25","26"],"C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\component\\Home.jsx",["27","28","29","30","31","32","33"],"import React, {useState, useEffect} from 'react'\r\nimport Header from './Header'\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport default function Home(props) {\r\n    var datetoday = []\r\n    var daysTemp = []\r\n    var telAvivTemp = 0\r\n    const [inputVal, setInputVal] = useState('')\r\n    const [input, setInput] = useState('')\r\n    const [dayName, setDayName] = useState([])\r\n    const [temp, setTemp] = useState(0)\r\n    const [dayTemp, setDayTemp] = useState([])\r\n    const [text, setText] = useState('')\r\n    const [favBut, setFavBut] = useState('Add To')\r\n\r\n    let defaultTelAviv =() =>{ \r\n     fetch(`http://dataservice.accuweather.com/currentconditions/v1/215854?apikey=OamihYj5o5ZcM4Apfg3ewaGUCTGWqUxG`, {\r\n        })\r\n    .then((response) => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      } else {\r\n        throw new Error(alert('Something went wrong'));\r\n      }\r\n    })\r\n    .then((jsonObject) => {\r\n        setTemp(jsonObject[0].Temperature.Metric.Value)\r\n        telAvivTemp = jsonObject[0].Temperature.Metric.Value\r\n        setText(jsonObject[0].WeatherText)\r\n       \r\n    return jsonObject;\r\n    });\r\n\r\n     fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/215854?apikey=OamihYj5o5ZcM4Apfg3ewaGUCTGWqUxG&metric=true`, {\r\n        })\r\n    .then((response) => {\r\n    return response.json();\r\n    })\r\n    .then((jsonObject) => {\r\n        daysTemp = [jsonObject.DailyForecasts[0].Temperature.Maximum.Value,jsonObject.DailyForecasts[1].Temperature.Maximum.Value,jsonObject.DailyForecasts[2].Temperature.Maximum.Value,jsonObject.DailyForecasts[3].Temperature.Maximum.Value,jsonObject.DailyForecasts[4].Temperature.Maximum.Value,]\r\n         datetoday = [jsonObject.DailyForecasts[0].Date.slice(0, 10),jsonObject.DailyForecasts[1].Date.slice(0, 10),jsonObject.DailyForecasts[2].Date.slice(0, 10),jsonObject.DailyForecasts[3].Date.slice(0, 10),jsonObject.DailyForecasts[4].Date.slice(0, 10)]\r\n        for(let i = 0; i< datetoday.length;i++){\r\n            datetoday[i].toString()\r\n            datetoday[i] = new Date(datetoday[i])\r\n            datetoday[i]= datetoday[i].getDay()\r\n\r\n            switch (datetoday[i]) {\r\n                case 0:\r\n                    datetoday[i] = \"Sun\";\r\n                    break;\r\n                  case 1:\r\n                    datetoday[i] = \"Mon\";\r\n                    break;\r\n                  case 2:\r\n                    datetoday[i] = \"Tue\";\r\n                    break;\r\n                  case 3:\r\n                    datetoday[i] = \"Wed\";\r\n                    break;\r\n                  case 4:\r\n                    datetoday[i] = \"Thu\";\r\n                    break;\r\n                  case 5:\r\n                    datetoday[i] = \"Fri\";\r\n                    break;\r\n                  case  6:\r\n                    datetoday[i] = \"Sat\";\r\n                }\r\n        }\r\n        setDayName(datetoday)\r\n        setDayTemp(daysTemp)\r\n        \r\n    return jsonObject;\r\n    });\r\n    }\r\n    useEffect(\r\n        defaultTelAviv\r\n        ,[]);\r\n      let checkFav = (e) =>{\r\n          let val = e.target.value\r\n          setInput(val)\r\n          val = val.toLowerCase()\r\n          val = val.replace(/\\s/g,'')\r\n        setInputVal(val)\r\n        props.arr.map(item =>{\r\n            console.log(item.name)\r\n            if(val === item.name){\r\n                setFavBut('Remov From')\r\n            }else{\r\n                setFavBut('Add To')\r\n            }\r\n        })\r\n      }\r\n      let addToList = () => {\r\n          if(favBut == 'Add To'){\r\n            props.add(inputVal,input)\r\n          }else{\r\n              props.delete(inputVal)\r\n          }\r\n      }\r\n      let telAvivFunc = () =>{\r\n        props.telAviv(temp)\r\n      }\r\n    return (\r\n        <div>\r\n            <Header telAvivCallFunc = {telAvivFunc}/>\r\n            <Input onChange={checkFav} type=\"text\"/><br/>\r\n            <p>TelAviv<br/>{temp}C</p>\r\n            <Button onClick={addToList}>{favBut} Favorites</Button>\r\n            <h3>{text}</h3>\r\n            <div className='div_flex'>\r\n                <p className='p_day'>{dayName[0]}<br/>{dayTemp[0]}C</p>\r\n                <p className='p_day'>{dayName[1]}<br/>{dayTemp[1]}C</p>\r\n                <p className='p_day'>{dayName[2]}<br/>{dayTemp[2]}C</p>\r\n                <p className='p_day'>{dayName[3]}<br/>{dayTemp[3]}C</p>\r\n                <p className='p_day'>{dayName[4]}<br/>{dayTemp[4]}C</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\App.js",["34","35","36","37"],"import React, {useState} from 'react'\nimport { HashRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport {useHistory} from 'react-router-dom';\nimport Header from './component/Header'\n\n\n\nimport './App.css';\nimport Favorites from './component/Favorites';\nimport Home from './component/Home';\nfunction App() {\n  const history = useHistory()\n  const [favArr,setFavArr] = useState([{disName:'tel aviv', name:'telaviv', temp:'25'}])\n  // const [key, setKey] = useState ()\n\n  let favDefTelAviv = (temp) => {\n    setFavArr([{disName:'tel aviv', name:'telaviv', temp: temp}])\n  }\n\n  let addFav = (inputVal, input) =>{\n    var key\n    if(input.indexOf(' ') >= 0){\n      let val = input.split(\" \")\n      console.log(`${input}`,val,inputVal)\n    fetch(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=OamihYj5o5ZcM4Apfg3ewaGUCTGWqUxG&q=${val[0]}%20${val[1]}`, {\n      })\n      .then((response) => {\n      return response.json();\n      })\n      .then((jsonObject) => {\n        console.log(jsonObject)\n        key = jsonObject[0].Key\n      return jsonObject;\n      })\n  } \n  else{\n\n  fetch(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=OamihYj5o5ZcM4Apfg3ewaGUCTGWqUxG&q=${inputVal}`, {\n    })\n    .then((response) => {\n    return response.json();\n     })\n    .then((jsonObject) => {\n      key = jsonObject[0].Key\n            return jsonObject;\n    });\n    }\n  setTimeout(() => {\n    getInfoApi(key,inputVal,input)\n  }, 1000);\n  }\n  let getInfoApi = (key,inputVal,input) => {\n    fetch(`http://dataservice.accuweather.com/currentconditions/v1/${key}?apikey=OamihYj5o5ZcM4Apfg3ewaGUCTGWqUxG`, {\n    })\n    .then((response) => {\n      console.log(response)\n      return response.json();\n\n})\n    .then((jsonObject) => {\n      console.log(jsonObject)\n      setFavArr([...favArr,{disName: input, name:inputVal,temp:jsonObject[0].Temperature.Metric.Value}])\n      return jsonObject;\n});\n  }\n  let deleteFav = (inputVal) =>{\n    let arr = favArr\n    setFavArr(arr.filter((value)=>{\n      if(value.name == inputVal){\n        return false\n      }else {\n        return true\n      }\n    }))\n  }\n  return (\n    <div className=\"App\">\n    <Router>\n      <Switch>\n        <Route exact path ='/' component={()=>{return<Home telAviv = {favDefTelAviv} arr ={favArr} delete ={deleteFav} add = {addFav}/>}}/>\n        <Route path ='/Favorites' component={()=>{return<Favorites arr ={favArr}/>}}/>\n      </Switch>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\component\\Header.jsx",["38","39","40","41"],"C:\\Users\\SNIR\\Desktop\\amazon\\wed developer\\react\\Weather\\src\\reportWebVitals.js",[],{"ruleId":"42","severity":1,"message":"43","line":1,"column":26,"nodeType":"44","messageId":"45","endLine":1,"endColumn":35},{"ruleId":"42","severity":1,"message":"46","line":5,"column":19,"nodeType":"44","messageId":"45","endLine":5,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":11,"column":29,"nodeType":"49","messageId":"50","endLine":11,"endColumn":31},{"ruleId":"42","severity":1,"message":"51","line":31,"column":9,"nodeType":"44","messageId":"45","endLine":31,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":31,"column":23,"nodeType":"54","endLine":31,"endColumn":61},{"ruleId":"52","severity":1,"message":"55","line":43,"column":20,"nodeType":"56","endLine":43,"endColumn":297},{"ruleId":"52","severity":1,"message":"57","line":44,"column":22,"nodeType":"56","endLine":44,"endColumn":258},{"ruleId":"58","severity":1,"message":"59","line":50,"column":13,"nodeType":"60","messageId":"61","endLine":71,"endColumn":18},{"ruleId":"62","severity":1,"message":"63","line":88,"column":28,"nodeType":"64","messageId":"65","endLine":88,"endColumn":30},{"ruleId":"47","severity":1,"message":"48","line":98,"column":21,"nodeType":"49","messageId":"50","endLine":98,"endColumn":23},{"ruleId":"42","severity":1,"message":"66","line":2,"column":47,"nodeType":"44","messageId":"45","endLine":2,"endColumn":51},{"ruleId":"42","severity":1,"message":"67","line":4,"column":8,"nodeType":"44","messageId":"45","endLine":4,"endColumn":14},{"ruleId":"42","severity":1,"message":"68","line":12,"column":9,"nodeType":"44","messageId":"45","endLine":12,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":69,"column":21,"nodeType":"49","messageId":"50","endLine":69,"endColumn":23},{"ruleId":"42","severity":1,"message":"69","line":1,"column":16,"nodeType":"44","messageId":"45","endLine":1,"endColumn":24},{"ruleId":"42","severity":1,"message":"70","line":2,"column":27,"nodeType":"44","messageId":"45","endLine":2,"endColumn":33},{"ruleId":"42","severity":1,"message":"71","line":2,"column":35,"nodeType":"44","messageId":"45","endLine":2,"endColumn":41},{"ruleId":"42","severity":1,"message":"72","line":2,"column":43,"nodeType":"44","messageId":"45","endLine":2,"endColumn":48},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setStyle' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'telAvivTemp' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'telAvivTemp' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'daysTemp' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ArrayExpression","Assignments to the 'datetoday' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Link' is defined but never used.","'Header' is defined but never used.","'history' is assigned a value but never used.","'useState' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used."]